openapi: 3.0.3
info:
  title: ShipShop API
  version: "1.0.0"
servers:
  - url: http://localhost:3001
paths:
  /api/health:
    get:
      summary: Healthcheck
      responses:
        "200": { description: OK }

  /api/users/register:
    post:
      summary: Registro (envía OTP)
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [username, email, password]
              properties:
                username: { type: string }
                email: { type: string, format: email }
                password: { type: string, minLength: 8 }
      responses:
        "201": { description: OTP enviado }

  /api/users/verify:
    post:
      summary: Verifica OTP y crea usuario
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [email, code]
              properties:
                email: { type: string, format: email }
                code: { type: string, pattern: "^[0-9]{6}$" }
      responses:
        "200": { description: Token y usuario }

  /api/users/login:
    post:
      summary: Login
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [email, password]
              properties:
                email: { type: string, format: email }
                password: { type: string }
      responses:
        "200": { description: Token y usuario }

  /api/users/me:
    get:
      summary: Perfil
      security: [{ bearerAuth: [] }]
      responses:
        "200": { description: OK }
        "401": { description: No autorizado }

  /api/products:
    get:
      summary: Listado
      parameters:
        - in: query; name: q; schema: { type: string }
        - in: query; name: minPrice; schema: { type: number }
        - in: query; name: maxPrice; schema: { type: number }
        - in: query; name: active; schema: { type: integer, enum: [0,1] }
        - in: query; name: page; schema: { type: integer, default: 1 }
        - in: query; name: pageSize; schema: { type: integer, default: 20 }
        - in: query; name: sort; schema: { type: string, enum: [created_at,price,title], default: created_at }
        - in: query; name: dir; schema: { type: string, enum: [ASC, DESC], default: DESC }
      responses: { "200": { description: OK } }
    post:
      summary: Crear producto (admin)
      security: [{ bearerAuth: [] }]
      responses:
        "201": { description: Creado }
        "403": { description: Requiere admin }

  /api/products/{id}:
    get:
      summary: Obtener producto
      parameters: [{ in: path, name: id, required: true, schema: { type: integer, minimum: 1 } }]
      responses: { "200": { description: OK }, "404": { description: No encontrado } }
    patch:
      summary: Actualizar producto (admin)
      security: [{ bearerAuth: [] }]
      parameters: [{ in: path, name: id, required: true, schema: { type: integer } }]
      responses: { "200": { description: OK }, "403": { description: Requiere admin } }
    delete:
      summary: Eliminar producto (admin)
      security: [{ bearerAuth: [] }]
      parameters: [{ in: path, name: id, required: true, schema: { type: integer } }]
      responses: { "204": { description: Borrado }, "403": { description: Requiere admin } }

  /api/products/{id}/ratings:
    get:
      summary: Listar ratings
      parameters:
        - { in: path, name: id, required: true, schema: { type: integer } }
        - { in: query, name: page, schema: { type: integer, default: 1 } }
        - { in: query, name: pageSize, schema: { type: integer, default: 10 } }
      responses: { "200": { description: OK } }
    post:
      summary: Crear/Actualizar mi rating (requiere compra previa)
      security: [{ bearerAuth: [] }]
      parameters: [{ in: path, name: id, required: true, schema: { type: integer } }]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [rating]
              properties:
                rating: { type: integer, minimum: 1, maximum: 5 }
                comment: { type: string, maxLength: 500 }
      responses:
        "201": { description: Creado }
        "200": { description: Actualizado }
        "403": { description: No cumple requisito de compra }

  /api/orders:
    post:
      summary: Crear orden
      security: [{ bearerAuth: [] }]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [items]
              properties:
                items:
                  type: array
                  items:
                    type: object
                    required: [product_id, quantity]
                    properties:
                      product_id: { type: integer, minimum: 1 }
                      quantity: { type: integer, minimum: 1 }
      responses: { "201": { description: Creada } }
    get:
      summary: Mis órdenes
      security: [{ bearerAuth: [] }]
      responses: { "200": { description: OK } }

  /api/orders/{id}:
    get:
      summary: Detalle de mi orden
      security: [{ bearerAuth: [] }]
      parameters: [{ in: path, name: id, required: true, schema: { type: integer } }]
      responses: { "200": { description: OK }, "404": { description: No encontrada } }

  /api/admin/orders/{id}/status:
    patch:
      summary: Cambiar estado de orden (admin)
      security: [{ bearerAuth: [] }]
      parameters: [{ in: path, name: id, required: true, schema: { type: integer } }]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [status]
              properties:
                status:
                  type: string
                  enum: [created, paid, shipped, cancelled, refunded]
      responses:
        "200": { description: OK }
        "403": { description: Requiere admin }

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
